import sys
sys.path.append('C:\\Users\\vlixi\\AppData\\Roaming\\Python\\Python311\\site-packages')

from pysat.formula import CNF
from pysat.solvers import Solver

cnf=CNF(from_clauses=[[1,2],[1,-2]])
with Solver(bootstrap_with=cnf) as solver :
    print(solver.solve())
    print(solver.get_model())

##
def tsf(i,j,n):
    ''' Ã  un triplet (i,j,n) = (ligne,colonne, chiffre) associe un nombre unique correspondant -> fonction bijective '''
    return int(str(i)+str(j)+str(n))

def au_moins_un_cfr():
    ''' every cell contains at least one number'''
    C1=[]
    for i in range (1,10):
        for j in range (1,10):
            l=[]
            for n in range (1,10):
                l.append(tsf(i,j,n))
            C1.append(l)
    return C1
    
def au_plus_un_cfr():
    C2=[]
    for i in range(1,10):
        for j in range(1,10):
            for x in range(1,9):
                l=[]
                for y in range(x+1,10):
                    l+=[-tsf(i,j,x),-tsf(i,j,y)]
                C2.append(l)
    return C2




def r_ts_cfr():
    '''every row contains every number'''
    C3=[]
    for i in range (1,10):
        for n in range (1,10):
            l=[]
            for j in range (1,10):
                l.append(tsf(i,j,n))
            C3.append(l)
    return C3

def c_ts_cfr():
    '''every column contains every number'''
    C4=[]
    for j in range (1,10):
        for n in range (1,10):
            l=[]
            for i in range (1,10):
                l.append(tsf(i,j,n))
            C4.append(l)
    return C4
    
    
def box_ts_cfr():
    ''' every 3x3 box contains every number '''
    C5=[]
    for r in range(3):
        for s in range(3):
            for n in range (1,10):
                l=[]
                for i in range (1,4):
                    for j in range (1,4):
                        l.append(tsf(3*r+i,3*s+j,n))
                C5.append(l)
    return C5

def init(l):
    return(au_moins_un_cfr()+au_plus_un_cfr()+r_ts_cfr()+c_ts_cfr()+box_ts_cfr()+l)
    
l=[]
clauses=init(l)
cnf=CNF(from_clauses=clauses)
with Solver(bootstrap_with=cnf) as solver :
    print(solver.solve())
    res=solver.get_model()
    
c=0
bad_res=[]
for x in res:
    if x>0:
        c+=1
        bad_res.append(x)
print(c)
print(bad_res)    
